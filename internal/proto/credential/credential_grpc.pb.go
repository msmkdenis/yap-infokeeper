// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internal/credential/api/grpchandlers/proto/credential.proto

package credential

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CredentialService_PostSaveCredential_FullMethodName = "/proto.CredentialService/PostSaveCredential"
	CredentialService_GetLoadCredentials_FullMethodName = "/proto.CredentialService/GetLoadCredentials"
)

// CredentialServiceClient is the client API for CredentialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialServiceClient interface {
	PostSaveCredential(ctx context.Context, in *PostCredentialRequest, opts ...grpc.CallOption) (*PostCredentialResponse, error)
	GetLoadCredentials(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
}

type credentialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialServiceClient(cc grpc.ClientConnInterface) CredentialServiceClient {
	return &credentialServiceClient{cc}
}

func (c *credentialServiceClient) PostSaveCredential(ctx context.Context, in *PostCredentialRequest, opts ...grpc.CallOption) (*PostCredentialResponse, error) {
	out := new(PostCredentialResponse)
	err := c.cc.Invoke(ctx, CredentialService_PostSaveCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) GetLoadCredentials(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, CredentialService_GetLoadCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialServiceServer is the server API for CredentialService service.
// All implementations must embed UnimplementedCredentialServiceServer
// for forward compatibility
type CredentialServiceServer interface {
	PostSaveCredential(context.Context, *PostCredentialRequest) (*PostCredentialResponse, error)
	GetLoadCredentials(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	mustEmbedUnimplementedCredentialServiceServer()
}

// UnimplementedCredentialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialServiceServer struct {
}

func (UnimplementedCredentialServiceServer) PostSaveCredential(context.Context, *PostCredentialRequest) (*PostCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveCredential not implemented")
}
func (UnimplementedCredentialServiceServer) GetLoadCredentials(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadCredentials not implemented")
}
func (UnimplementedCredentialServiceServer) mustEmbedUnimplementedCredentialServiceServer() {}

// UnsafeCredentialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialServiceServer will
// result in compilation errors.
type UnsafeCredentialServiceServer interface {
	mustEmbedUnimplementedCredentialServiceServer()
}

func RegisterCredentialServiceServer(s grpc.ServiceRegistrar, srv CredentialServiceServer) {
	s.RegisterService(&CredentialService_ServiceDesc, srv)
}

func _CredentialService_PostSaveCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).PostSaveCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_PostSaveCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).PostSaveCredential(ctx, req.(*PostCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_GetLoadCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).GetLoadCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialService_GetLoadCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).GetLoadCredentials(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialService_ServiceDesc is the grpc.ServiceDesc for CredentialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CredentialService",
	HandlerType: (*CredentialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSaveCredential",
			Handler:    _CredentialService_PostSaveCredential_Handler,
		},
		{
			MethodName: "GetLoadCredentials",
			Handler:    _CredentialService_GetLoadCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/credential/api/grpchandlers/proto/credential.proto",
}
