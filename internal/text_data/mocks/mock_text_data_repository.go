// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msmkdenis/yap-infokeeper/internal/text_data/service (interfaces: TextDataRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/msmkdenis/yap-infokeeper/internal/model"
	specification "github.com/msmkdenis/yap-infokeeper/internal/text_data/specification"
)

// MockTextDataRepository is a mock of TextDataRepository interface.
type MockTextDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTextDataRepositoryMockRecorder
}

// MockTextDataRepositoryMockRecorder is the mock recorder for MockTextDataRepository.
type MockTextDataRepositoryMockRecorder struct {
	mock *MockTextDataRepository
}

// NewMockTextDataRepository creates a new mock instance.
func NewMockTextDataRepository(ctrl *gomock.Controller) *MockTextDataRepository {
	mock := &MockTextDataRepository{ctrl: ctrl}
	mock.recorder = &MockTextDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextDataRepository) EXPECT() *MockTextDataRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockTextDataRepository) Insert(arg0 context.Context, arg1 model.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTextDataRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTextDataRepository)(nil).Insert), arg0, arg1)
}

// SelectAll mocks base method.
func (m *MockTextDataRepository) SelectAll(arg0 context.Context, arg1 *specification.TextDataSpecification) ([]model.TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", arg0, arg1)
	ret0, _ := ret[0].([]model.TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockTextDataRepositoryMockRecorder) SelectAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockTextDataRepository)(nil).SelectAll), arg0, arg1)
}
