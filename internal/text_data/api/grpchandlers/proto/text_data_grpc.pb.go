// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internal/text_data/api/grpchandlers/proto/text_data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextDataService_PostSaveTextData_FullMethodName = "/proto.TextDataService/PostSaveTextData"
	TextDataService_GetLoadTextData_FullMethodName  = "/proto.TextDataService/GetLoadTextData"
)

// TextDataServiceClient is the client API for TextDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextDataServiceClient interface {
	PostSaveTextData(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*PostTextDataResponse, error)
	GetLoadTextData(ctx context.Context, in *GetTextDataRequest, opts ...grpc.CallOption) (*GetTextDataResponse, error)
}

type textDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextDataServiceClient(cc grpc.ClientConnInterface) TextDataServiceClient {
	return &textDataServiceClient{cc}
}

func (c *textDataServiceClient) PostSaveTextData(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*PostTextDataResponse, error) {
	out := new(PostTextDataResponse)
	err := c.cc.Invoke(ctx, TextDataService_PostSaveTextData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textDataServiceClient) GetLoadTextData(ctx context.Context, in *GetTextDataRequest, opts ...grpc.CallOption) (*GetTextDataResponse, error) {
	out := new(GetTextDataResponse)
	err := c.cc.Invoke(ctx, TextDataService_GetLoadTextData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextDataServiceServer is the server API for TextDataService service.
// All implementations must embed UnimplementedTextDataServiceServer
// for forward compatibility
type TextDataServiceServer interface {
	PostSaveTextData(context.Context, *PostTextDataRequest) (*PostTextDataResponse, error)
	GetLoadTextData(context.Context, *GetTextDataRequest) (*GetTextDataResponse, error)
	mustEmbedUnimplementedTextDataServiceServer()
}

// UnimplementedTextDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextDataServiceServer struct {
}

func (UnimplementedTextDataServiceServer) PostSaveTextData(context.Context, *PostTextDataRequest) (*PostTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveTextData not implemented")
}
func (UnimplementedTextDataServiceServer) GetLoadTextData(context.Context, *GetTextDataRequest) (*GetTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadTextData not implemented")
}
func (UnimplementedTextDataServiceServer) mustEmbedUnimplementedTextDataServiceServer() {}

// UnsafeTextDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextDataServiceServer will
// result in compilation errors.
type UnsafeTextDataServiceServer interface {
	mustEmbedUnimplementedTextDataServiceServer()
}

func RegisterTextDataServiceServer(s grpc.ServiceRegistrar, srv TextDataServiceServer) {
	s.RegisterService(&TextDataService_ServiceDesc, srv)
}

func _TextDataService_PostSaveTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDataServiceServer).PostSaveTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDataService_PostSaveTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDataServiceServer).PostSaveTextData(ctx, req.(*PostTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextDataService_GetLoadTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDataServiceServer).GetLoadTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDataService_GetLoadTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDataServiceServer).GetLoadTextData(ctx, req.(*GetTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextDataService_ServiceDesc is the grpc.ServiceDesc for TextDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TextDataService",
	HandlerType: (*TextDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSaveTextData",
			Handler:    _TextDataService_PostSaveTextData_Handler,
		},
		{
			MethodName: "GetLoadTextData",
			Handler:    _TextDataService_GetLoadTextData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/text_data/api/grpchandlers/proto/text_data.proto",
}
